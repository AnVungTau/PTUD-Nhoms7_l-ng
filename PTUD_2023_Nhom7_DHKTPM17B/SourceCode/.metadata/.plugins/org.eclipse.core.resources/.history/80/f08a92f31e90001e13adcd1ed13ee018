package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import connectDB.ConnectDB;
import entity.BangChamCongCongNhan;
import entity.BangPhanCong;
import entity.CongDoan;
import entity.CongNhan;
import entity.HopDong;
import entity.SanPham;

/**
 * @author Nguyễn Hồng Quân
 */
public class BangChamCongCongNhan_DAO {
	public ArrayList<BangChamCongCongNhan> getDanhSachDaChamTheoNgay(java.util.Date ngay) {
		PreparedStatement sta = null;
		ArrayList<BangChamCongCongNhan> dsPC = new ArrayList<BangChamCongCongNhan>();
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "select * from BangPhanCong pc join CongNhan cn on pc.maCN = cn.maCN join CongDoan cd on cd.maCD = pc.maCD join SanPham sp on sp.maSP = cd.maSP join BangChamCongCongNhan bcccn on bcccn.maCN = pc.maCN and bcccn.maCD = pc.maCD where bcccn.ngayChamCong = ?";
			sta = con.prepareStatement(sql);
			Date sqlDateNgayCham = new Date(ngay.getTime());
			sta.setDate(1, sqlDateNgayCham);

			ResultSet rs = sta.executeQuery();
			while (rs.next()) {

				SanPham sp = new SanPham();
				sp.setMaSP(rs.getString("maSP"));
				sp.setTenSP(rs.getString("tenSP"));
				sp.setHopDong(new HopDong());

				CongDoan cd = new CongDoan();
				cd.setMaCD(rs.getString("maCD"));
				cd.setTenCD(rs.getString("tenCD"));
				cd.setSp(sp);

				CongNhan cn = new CongNhan();
				cn.setMaCN(rs.getString("maCN"));
				cn.setHoTen(rs.getString("hoTen"));

				BangPhanCong pc = new BangPhanCong();
				pc.setCongNhan(cn);
				pc.setCongDoan(cd);
				pc.setNgayPhanCong(rs.getDate("ngayPhanCong"));
				pc.setSoLuongPC(rs.getInt("soLuongPhanCong"));
				pc.setTrangThai(rs.getInt("trangThai"));

				int soLuongLam = rs.getInt("soLuongLam");
				Date ngayCham = rs.getDate("ngayChamCong");
				BangChamCongCongNhan bcccn = new BangChamCongCongNhan(pc, ngayCham, soLuongLam);

				dsPC.add(bcccn);

			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return dsPC;
	}

		public ArrayList<BangChamCongCongNhan> getDanhSachCHamCOng() {
			PreparedStatement sta = null;
			ArrayList<BangChamCongCongNhan> dsPC = new ArrayList<BangChamCongCongNhan>();
			try {
				ConnectDB.getInstance();
				Connection con = ConnectDB.getConnection();
				String sql = "select * from BangPhanCong pc join CongNhan cn on pc.maCN = cn.maCN join CongDoan cd on cd.maCD = pc.maCD join SanPham sp on sp.maSP = cd.maSP join BangChamCongCongNhan bcccn on bcccn.maCN = pc.maCN and bcccn.maCD = pc.maCD";
				sta = con.prepareStatement(sql);

				ResultSet rs = sta.executeQuery();
				while (rs.next()) {

					SanPham sp = new SanPham();
					sp.setMaSP(rs.getString("maSP"));
					sp.setTenSP(rs.getString("tenSP"));
					sp.setSoLuong(rs.getInt("soLuong"));
					sp.setDonViTinh(rs.getString("donViTinh"));
					sp.setGhiChu(rs.getString("ghiChu"));
					sp.setHopDong(new HopDong());

					CongDoan cd = new CongDoan();
					cd.setMaCD(rs.getString("maCD"));
					cd.setTenCD(rs.getString("tenCD"));
					cd.setsoThuTu(rs.getInt("soThuTu"));
					cd.setsoLuongCan(rs.getInt("soLuongCan"));
					cd.setTinhTrang(rs.getInt("tinhTrang"));
					cd.setGia(rs.getFloat("gia"));
					cd.setGhiChu(rs.getString("ghiChu"));
					cd.setSp(sp);

					CongNhan cn = new CongNhan();
					cn.setMaCN(rs.getString("maCN"));
					cn.setHoTen(rs.getString("hoTen"));

					BangPhanCong pc = new BangPhanCong();
					pc.setCongNhan(cn);
					pc.setCongDoan(cd);
					pc.setNgayPhanCong(rs.getDate("ngayPhanCong"));
					pc.setSoLuongPC(rs.getInt("soLuongPhanCong"));
					pc.setTrangThai(rs.getInt("trangThai"));

					int soLuongLam = rs.getInt("soLuongLam");
					Date ngayCham = rs.getDate("ngayChamCong");
					BangChamCongCongNhan bcccn = new BangChamCongCongNhan(pc, ngayCham, soLuongLam);

					dsPC.add(bcccn);

				}
			} catch (SQLException e) {
				e.printStackTrace();
			}
			return dsPC;
		}
	public boolean them(BangChamCongCongNhan bchamcong) {
		PreparedStatement sta = null;
		int n = 0;
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "insert into BangChamCongCongNhan values(?,?,?,?)";
			sta = con.prepareStatement(sql);

			sta.setString(1, bchamcong.getPhanCong().getCongNhan().getMaCN());
			sta.setString(2, bchamcong.getPhanCong().getCongDoan().getMaCD());
			Date sqlDateNgayCham = new Date(bchamcong.getNgayCham().getTime());
			sta.setDate(3, sqlDateNgayCham);
			sta.setInt(4, bchamcong.getSoLuongLam());

			n = sta.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				sta.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return n > 0;
	}

	public boolean capNhat(BangChamCongCongNhan bchamcong) {
		PreparedStatement sta = null;
		int n = 0;
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "update BangChamCongCongNhan set soLuongLam = ? where maCN = ? and maCD = ? and ngayChamCong = ?";
			sta = con.prepareStatement(sql);

			sta.setInt(1, bchamcong.getSoLuongLam());
			sta.setString(2, bchamcong.getPhanCong().getCongNhan().getMaCN());
			sta.setString(3, bchamcong.getPhanCong().getCongDoan().getMaCD());
			Date sqlDateNgayCham = new Date(bchamcong.getNgayCham().getTime());
			sta.setDate(4, sqlDateNgayCham);

			n = sta.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				sta.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return n > 0;
	}

	public boolean kiemTraTonTaiCuaBangChamCong(String maCN, String maCD, java.util.Date ngayCham) {
		PreparedStatement sta = null;
		int n = 0;
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "select count(*) from BangChamCongCongNhan where maCN = ? and maCD = ? and ngayChamCong = ?";
			sta = con.prepareStatement(sql);

			sta.setString(1, maCN);
			sta.setString(2, maCD);
			Date sqlDateNgayCham = new Date(ngayCham.getTime());
			sta.setDate(3, sqlDateNgayCham);

			ResultSet rs = sta.executeQuery();
			while (rs.next()) {
				n = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				sta.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return n > 0;
	}

	public ArrayList<BangChamCongCongNhan> getDanhSachPhanCongTheoTrangThaiHoanThanh(int trangThaiHoanThanh) {
		PreparedStatement sta = null;
		ArrayList<BangChamCongCongNhan> dsPC = new ArrayList<BangChamCongCongNhan>();
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "select * from BangPhanCong pc join CongNhan cn on pc.maCN = cn.maCN join CongDoan cd on cd.maCD = pc.maCD join SanPham sp on sp.maSP = cd.maSP join BangChamCongCongNhan bcccn on bcccn.maCN = pc.maCN and bcccn.maCD = pc.maCD where pc.trangThai = ?";
			sta = con.prepareStatement(sql);
			sta.setInt(1, trangThaiHoanThanh);

			ResultSet rs = sta.executeQuery();
			while (rs.next()) {

				SanPham sp = new SanPham();
				sp.setMaSP(rs.getString("maSP"));
				sp.setTenSP(rs.getString("tenSP"));
				sp.setSoLuong(rs.getInt("soLuong"));
				sp.setDonViTinh(rs.getString("donViTinh"));
				sp.setGhiChu(rs.getString("ghiChu"));
				sp.setHopDong(new HopDong());

				CongDoan cd = new CongDoan();
				cd.setMaCD(rs.getString("maCD"));
				cd.setTenCD(rs.getString("tenCD"));
				cd.setsoThuTu(rs.getInt("soThuTu"));
				cd.setsoLuongCan(rs.getInt("soLuongCan"));
				cd.setTinhTrang(rs.getInt("tinhTrang"));
				cd.setGia(rs.getFloat("gia"));
				cd.setGhiChu(rs.getString("ghiChu"));
				cd.setSp(sp);

				CongNhan cn = new CongNhan();
				cn.setMaCN(rs.getString("maCN"));
				cn.setHoTen(rs.getString("hoTen"));

				BangPhanCong pc = new BangPhanCong();
				pc.setCongNhan(cn);
				pc.setCongDoan(cd);
				pc.setNgayPhanCong(rs.getDate("ngayPhanCong"));
				pc.setSoLuongPC(rs.getInt("soLuongPhanCong"));
				pc.setTrangThai(rs.getInt("trangThai"));

				int soLuongLam = rs.getInt("soLuongLam");
				Date ngayCham = rs.getDate("ngayChamCong");
				BangChamCongCongNhan bcccn = new BangChamCongCongNhan(pc, ngayCham, soLuongLam);

				dsPC.add(bcccn);

			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return dsPC;
	}

	public ArrayList<BangChamCongCongNhan> getDanhSachPhanCongTheoTrangThaiHoanThanh(SanPham sanPham, CongDoan congDoan,
			int trangThaiHoanThanh) {
		PreparedStatement sta = null;
		ArrayList<BangChamCongCongNhan> dsPC = new ArrayList<BangChamCongCongNhan>();
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "select * from BangPhanCong pc join CongNhan cn on pc.maCN = cn.maCN join CongDoan cd on cd.maCD = pc.maCD join SanPham sp on sp.maSP = cd.maSP join BangChamCongCongNhan bcccn on bcccn.maCN = pc.maCN and bcccn.maCD = pc.maCD where sp.maSP = ? and cd.maCD = ? and pc.trangThai = ?";
			sta = con.prepareStatement(sql);
			sta.setString(1, sanPham.getMaSP());
			sta.setString(2, congDoan.getMaCD());
			sta.setInt(3, trangThaiHoanThanh);

			ResultSet rs = sta.executeQuery();
			while (rs.next()) {

				SanPham sp = new SanPham();
				sp.setMaSP(rs.getString("maSP"));
				sp.setTenSP(rs.getString("tenSP"));
				sp.setSoLuong(rs.getInt("soLuong"));
				sp.setDonViTinh(rs.getString("donViTinh"));
				sp.setGhiChu(rs.getString("ghiChu"));
				sp.setHopDong(new HopDong());

				CongDoan cd = new CongDoan();
				cd.setMaCD(rs.getString("maCD"));
				cd.setTenCD(rs.getString("tenCD"));
				cd.setsoThuTu(rs.getInt("soThuTu"));
				cd.setsoLuongCan(rs.getInt("soLuongCan"));
				cd.setTinhTrang(rs.getInt("tinhTrang"));
				cd.setGia(rs.getFloat("gia"));
				cd.setGhiChu(rs.getString("ghiChu"));
				cd.setSp(sp);

				CongNhan cn = new CongNhan();
				cn.setMaCN(rs.getString("maCN"));
				cn.setHoTen(rs.getString("hoTen"));

				BangPhanCong pc = new BangPhanCong();
				pc.setCongNhan(cn);
				pc.setCongDoan(cd);
				pc.setNgayPhanCong(rs.getDate("ngayPhanCong"));
				pc.setSoLuongPC(rs.getInt("soLuongPhanCong"));
				pc.setTrangThai(rs.getInt("trangThai"));

				int soLuongLam = rs.getInt("soLuongLam");
				Date ngayCham = rs.getDate("ngayChamCong");
				BangChamCongCongNhan bcccn = new BangChamCongCongNhan(pc, ngayCham, soLuongLam);

				dsPC.add(bcccn);

			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return dsPC;
	}
}
