package gui;

import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import javax.swing.SwingConstants;
import java.awt.Dimension;
import javax.swing.JTextField;
import javax.swing.JSpinner;
import javax.swing.SpinnerNumberModel;
import javax.swing.JComboBox;
import entity.HopDong;
import util.QuanLyMaHopDong;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;

import java.awt.BorderLayout;
import javax.swing.border.EtchedBorder;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import com.toedter.calendar.JDateChooser;
import dao.HopDong_DAO;
import javax.swing.table.DefaultTableModel;
import javax.swing.ImageIcon;
import javax.swing.JTextArea;
/**
 * @author Trần Vũ Minh Nhật
 */
public class HopDong_Panel extends  JPanel implements ActionListener{

	private static final long serialVersionUID = 1L;
	private JTextField txtMaHD;
	private JTextField txtTenHD;
	private JTextField txtTimKiem;
	private JTable table;
	private JTextField txtTenKH;
	private JButton btnLamMoi;
	private JButton btnThem;
	private JButton btnLuu;
	private JButton btnTim;
	private JSpinner spnTang_1;
	private JSpinner spnTongTien;
	private JDateChooser dateChooserBatDau;
	private JDateChooser dateChooserKetThuc;
	private JComboBox<String> cmbLoc;
	private DefaultTableModel tableModel;
	HopDong_DAO hopDongDAO = new HopDong_DAO(); 
	private JLabel lblGhiChu;
	private JTextField txtGhiChu;
	/**
	 * Create the panel.
	 */
	public HopDong_Panel() {
		setBackground(new Color(255, 255, 255));
		setLayout(new BorderLayout(0, 0));
		
		JPanel pnlTop = new JPanel();
		pnlTop.setPreferredSize(new Dimension(10, 250));
		pnlTop.setBackground(new Color(255, 255, 255));
		add(pnlTop, BorderLayout.NORTH);
		pnlTop.setLayout(null);
		
		JLabel lblNewLabel = new JLabel("THÔNG TIN HỢP ĐỒNG");
		lblNewLabel.setHorizontalAlignment(SwingConstants.CENTER);
		lblNewLabel.setFont(new Font("Tahoma", Font.PLAIN, 18));
		
		lblNewLabel.setBounds(10, 11, 1280, 25);
		pnlTop.add(lblNewLabel);
		
		JLabel lblMaHopDong = new JLabel("Mã hợp đồng");
		lblMaHopDong.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblMaHopDong.setPreferredSize(new Dimension(64, 14));
		lblMaHopDong.setMinimumSize(new Dimension(64, 14));
		lblMaHopDong.setMaximumSize(new Dimension(64, 14));
		lblMaHopDong.setBounds(166, 63, 82, 19);
		pnlTop.add(lblMaHopDong);
		
		JLabel lblTenHopDong = new JLabel("Tên hợp đồng");
		lblTenHopDong.setPreferredSize(new Dimension(64, 14));
		lblTenHopDong.setMinimumSize(new Dimension(64, 14));
		lblTenHopDong.setMaximumSize(new Dimension(64, 14));
		lblTenHopDong.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblTenHopDong.setBounds(166, 103, 90, 19);
		pnlTop.add(lblTenHopDong);
		
		JLabel lblTenKhachHang = new JLabel("Tên khách hàng");
		lblTenKhachHang.setPreferredSize(new Dimension(64, 14));
		lblTenKhachHang.setMinimumSize(new Dimension(64, 14));
		lblTenKhachHang.setMaximumSize(new Dimension(64, 14));
		lblTenKhachHang.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblTenKhachHang.setBounds(166, 144, 110, 19);
		pnlTop.add(lblTenKhachHang);
		
		 
		
		txtMaHD = new JTextField();
		txtMaHD.setText("");
		txtMaHD.setEnabled(false);
		txtMaHD.setColumns(10);
		txtMaHD.setBounds(276, 63, 145, 20);
		pnlTop.add(txtMaHD);
		
		txtTenHD = new JTextField();
		txtTenHD.setColumns(10);
		txtTenHD.setBounds(276, 103, 145, 20);
		pnlTop.add(txtTenHD);
		
		spnTongTien = new JSpinner();
		spnTongTien.setModel(new SpinnerNumberModel(Integer.valueOf(0), null, null, Integer.valueOf(1)));
		spnTongTien.setFont(new Font("Tahoma", Font.PLAIN, 12));
		spnTongTien.setBounds(276, 174, 145, 20);
		pnlTop.add(spnTongTien);
		
		btnThem = new JButton("Thêm");
		btnThem.setBackground(new Color(255, 255, 255));
		btnThem.setIcon(new ImageIcon("D:\\HocKy5\\PTUD\\PTUD_2023_Nhoms7_DHKTPM17B_Offical\\SourceCode\\QuanLyLuongSanPham_Nhom7\\img\\Custom-Icon-Design-Flatastic-1-Add-1.24.png"));
		btnThem.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnThem.setBounds(416, 205, 110, 25);
		pnlTop.add(btnThem);
		
		
		
		btnLuu = new JButton("Lưu");
		btnLuu.setBackground(new Color(255, 255, 255));
		btnLuu.setIcon(new ImageIcon("D:\\HocKy5\\PTUD\\PTUD_2023_Nhoms7_DHKTPM17B_Offical\\SourceCode\\QuanLyLuongSanPham_Nhom7\\img\\Oxygen-Icons.org-Oxygen-Actions-document-save.24.png"));
		btnLuu.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnLuu.setBounds(606, 205, 119, 25);
		pnlTop.add(btnLuu);
		
		JLabel lblTongTien = new JLabel("Tổng tiền (VND)");
		lblTongTien.setPreferredSize(new Dimension(64, 14));
		lblTongTien.setMinimumSize(new Dimension(64, 14));
		lblTongTien.setMaximumSize(new Dimension(64, 14));
		lblTongTien.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblTongTien.setBounds(166, 174, 110, 19);
		pnlTop.add(lblTongTien);
		
		txtTenKH = new JTextField();
		txtTenKH.setColumns(10);
		txtTenKH.setBounds(276, 144, 145, 20);
		pnlTop.add(txtTenKH);
		
		JLabel lblSoTienCoc = new JLabel("Số tiền cọc");
		lblSoTienCoc.setPreferredSize(new Dimension(64, 14));
		lblSoTienCoc.setMinimumSize(new Dimension(64, 14));
		lblSoTienCoc.setMaximumSize(new Dimension(64, 14));
		lblSoTienCoc.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblSoTienCoc.setBounds(520, 66, 82, 19);
		pnlTop.add(lblSoTienCoc);
		
		spnTang_1 = new JSpinner();
		spnTang_1.setFont(new Font("Tahoma", Font.PLAIN, 12));
		spnTang_1.setBounds(626, 63, 131, 20);
		pnlTop.add(spnTang_1);
		
		JPanel pnlDanhSachHopDong = new JPanel();
		pnlDanhSachHopDong.setBorder(new TitledBorder(new EtchedBorder(EtchedBorder.LOWERED, new Color(255, 255, 255), new Color(160, 160, 160)), "Danh s\u00E1ch hợp đồng", TitledBorder.LEADING, TitledBorder.TOP, null, new Color(0, 0, 0)));
		pnlDanhSachHopDong.setBackground(Color.WHITE);
		add(pnlDanhSachHopDong);
		pnlDanhSachHopDong.setLayout(new BorderLayout(0, 0));
		
		JPanel pnlTim = new JPanel();
		pnlTim.setLayout(null);
		pnlTim.setSize(new Dimension(0, 100));
		pnlTim.setPreferredSize(new Dimension(10, 33));
		pnlTim.setBackground(Color.WHITE);
		pnlDanhSachHopDong.add(pnlTim, BorderLayout.NORTH);
		
		txtTimKiem = new JTextField();
		txtTimKiem.setColumns(10);
		txtTimKiem.setBounds(341, 8, 226, 20);
		pnlTim.add(txtTimKiem);
		
		cmbLoc = new JComboBox<String>();
		cmbLoc.setModel(new DefaultComboBoxModel(new String[] {"Tất cả", "Mã hợp đồng"}));
		cmbLoc.setBounds(80, 7, 116, 20);
		pnlTim.add(cmbLoc);
		
		JLabel lblLoc = new JLabel("Lọc");
		lblLoc.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblLoc.setBounds(10, 7, 60, 20);
		pnlTim.add(lblLoc);
		
		btnTim = new JButton("");
		btnTim.setBackground(new Color(255, 255, 255));
		btnTim.setBorderPainted(false);
		btnTim.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnTim.setIcon(new ImageIcon("img\\Ampeross-Qetto-2-Search.24.png"));
		btnTim.setBounds(570, 2, 25, 24);
		pnlTim.add(btnTim); 
		btnTim.addActionListener(new ActionListener() {
		    public void actionPerformed(ActionEvent e) {
		        timKiemHopDong();
		    }
		});

		
		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBackground(Color.WHITE);
		pnlDanhSachHopDong.add(scrollPane, BorderLayout.CENTER);
		
		table = new JTable();
		table.setModel(new DefaultTableModel(
			new Object[][] {
			},
			new String[] {
				"M\u00E3 hợp đồng", "T\u00EAn hợp đồng", "Tên khách hàng", "Tổng tiền", "Số tiền cọc", "Ngày bắt đầu", "Ngày kết thúc", "Ghi chú"
			}
		));
		table.setFillsViewportHeight(true);
		table.setBackground(Color.WHITE);
		scrollPane.setViewportView(table);
		
		dateChooserBatDau = new JDateChooser();
		dateChooserBatDau.setBounds(626, 103, 135, 20);
		pnlTop.add(dateChooserBatDau);
		
		
		dateChooserKetThuc = new JDateChooser();
		dateChooserKetThuc.setBounds(626, 144, 135, 19);
		pnlTop.add(dateChooserKetThuc);
		
		JLabel lblNgayKetThuc = new JLabel("Ngày kết thúc");
		lblNgayKetThuc.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblNgayKetThuc.setBounds(520, 143, 142, 19);
		pnlTop.add(lblNgayKetThuc);
		
		JLabel lblNgayBatDau = new JLabel("Ngày bắt đầu");
		lblNgayBatDau.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblNgayBatDau.setBounds(520, 103, 142, 19);
		pnlTop.add(lblNgayBatDau);
		
		btnLamMoi = new JButton("Làm mới");
		btnLamMoi.setBackground(new Color(255, 255, 255));
		btnLamMoi.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnLamMoi.setIcon(new ImageIcon("D:\\HocKy5\\PTUD\\PTUD_2023_Nhoms7_DHKTPM17B_Offical\\SourceCode\\QuanLyLuongSanPham_Nhom7\\img\\Hopstarter-Button-Button-Reload.24.png"));
		btnLamMoi.setBounds(227, 205, 110, 25);
		pnlTop.add(btnLamMoi);
		
		lblGhiChu = new JLabel("Ghi chú");
		lblGhiChu.setPreferredSize(new Dimension(64, 14));
		lblGhiChu.setMinimumSize(new Dimension(64, 14));
		lblGhiChu.setMaximumSize(new Dimension(64, 14));
		lblGhiChu.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblGhiChu.setBounds(783, 63, 82, 19);
		pnlTop.add(lblGhiChu);
		
		txtGhiChu = new JTextField();
		txtGhiChu.setColumns(10);
		txtGhiChu.setBounds(783, 93, 145, 70);
		pnlTop.add(txtGhiChu);
		LoadDanhSachHopDong(hopDongDAO.getAllHopDong());
		btnLamMoi.addActionListener(this);
		btnThem.addActionListener(this);
		btnLuu.addActionListener(this); 
		addTableSelectionListener(table);
	} 
	private void LoadDanhSachHopDong(ArrayList<HopDong> dsHD) {
	    clearTable(table);  
	    DefaultTableModel model = (DefaultTableModel) table.getModel();  
	    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");

	    for (HopDong hd : dsHD) {
	        model.addRow(new Object[] {
	                hd.getMaHD(),
	                hd.getTenHD(),
	                hd.getTenKH(),
	                hd.getTongTienHD(),
	                hd.getSoTienCoc(),
	                dateFormat.format(hd.getNgayBatDau()),
	                dateFormat.format(hd.getNgayKetThuc()),
	                hd.getGhiChu()
	        });
	    }
	}

 
	public void themHD() {
	    // Lấy dữ liệu từ các trường nhập liệu
		QuanLyMaHopDong qlmaHD = new QuanLyMaHopDong();
	    String maHD = txtMaHD.getText().trim();
	    String tenHD = txtTenHD.getText().trim();
	    String tenKH = txtTenKH.getText().trim();
	    double soTienCoc = Double.parseDouble(spnTang_1.getValue().toString());
	    double tongTienHD = Double.parseDouble(spnTongTien.getValue().toString());
	    Date ngayBatDau = dateChooserBatDau.getDate();
	    Date ngayKetThuc = dateChooserKetThuc.getDate();
	    String ghiChu = "";  // Bạn có thể thêm phần xử lý cho trường ghiChu nếu cần

	    // Kiểm tra dữ liệu hợp lệ trước khi thêm vào cơ sở dữ liệu
	    if ( tenHD.isEmpty() || tenKH.isEmpty() || ngayBatDau == null || ngayKetThuc == null) {
	        JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin.");
	        return;
	    }

	    // Tạo đối tượng HopDong từ dữ liệu nhập liệu
	    HopDong hopDong = new HopDong(maHD, tenHD, tenKH, soTienCoc, tongTienHD, ngayBatDau, ngayKetThuc, ghiChu);
	    hopDong.setMaHD(qlmaHD.generateMaHopDong());

	    boolean themThanhCong = hopDongDAO.themHopDong(hopDong);

	    // Kiểm tra kết quả và thông báo cho người dùng
	    if (themThanhCong) {
	        JOptionPane.showMessageDialog(this, "Thêm hợp đồng thành công.");
	        LoadDanhSachHopDong(hopDongDAO.getAllHopDong());
	    } else {
	        JOptionPane.showMessageDialog(this, "Thêm hợp đồng thất bại.");
	    }
	}

	public void suaHD() {
	    // Lấy thông tin từ các trường nhập liệu
	    String maHD = txtMaHD.getText().trim();
	    String tenHD = txtTenHD.getText().trim();
	    String tenKH = txtTenKH.getText().trim();
	    String ghiChu = txtGhiChu.getText().trim();

	    // Kiểm tra xem các trường bắt buộc đã được nhập chưa
	    if (tenHD.isEmpty() || tenKH.isEmpty()) {
	        JOptionPane.showMessageDialog(this, "Vui lòng nhập đầy đủ thông tin hợp đồng.");
	        return;
	    }

	    // Lấy thông tin từ các trường khác
	    double soTienCoc = (double) spnTang_1.getValue();
	    double tongTien = (double) spnTongTien.getValue();

	    // Lấy ngày bắt đầu và ngày kết thúc từ JDateChooser
	    Date ngayBatDau = dateChooserBatDau.getDate();
	    Date ngayKetThuc = dateChooserKetThuc.getDate();

	    // Kiểm tra xem ngày bắt đầu và ngày kết thúc có hợp lệ không
	    if (ngayBatDau == null || ngayKetThuc == null || ngayBatDau.after(ngayKetThuc)) {
	        JOptionPane.showMessageDialog(this, "Ngày bắt đầu và ngày kết thúc không hợp lệ.");
	        return;
	    }

	    // Lấy ghi chú từ JTextArea hoặc JTextField nếu có 

	    // Tạo đối tượng HopDong với thông tin mới
	    HopDong hopDong = new HopDong(maHD, tenHD, tenKH, soTienCoc, tongTien, ngayBatDau, ngayKetThuc, ghiChu);

	    // Gọi phương thức cập nhật trong HopDong_DAO
	    HopDong_DAO hopDongDAO = new HopDong_DAO();
	    boolean capNhatThanhCong = hopDongDAO.suaHD(hopDong);

	    // Hiển thị thông báo tương ứng
	    if (capNhatThanhCong) {
	        JOptionPane.showMessageDialog(this, "Cập nhật thông tin hợp đồng thành công.");
	    } else {
	        JOptionPane.showMessageDialog(this, "Cập nhật thông tin hợp đồng không thành công.");
	    }
	}

	public void actionPerformed(ActionEvent e) {
		Object o = e.getSource();
	
		if (o.equals(btnLamMoi)) {
			txtMaHD.setText("");
			txtTenHD.setText("");
			txtTenKH.setText("");
			txtGhiChu.setText("");
		}
	
		if (o.equals(btnThem)) {
			themHD();
		}
	
		if (o.equals(btnLuu)) {
			suaHD();
		} 
	}  
	public void timKiemHopDong() {
	    String tuKhoa = txtTimKiem.getText().trim();
	    int luaChonLoc = cmbLoc.getSelectedIndex();
	    ArrayList<HopDong> ketQuaTimKiem = new ArrayList<>();

	    switch (luaChonLoc) {
	        case 0: // Tất cả
	            ketQuaTimKiem =	hopDongDAO.getAllHopDong();
	            break;
	        case 1: // Mã hợp đồng
	            ketQuaTimKiem = hopDongDAO.getHopDongByMa(tuKhoa);
	            break;
	        case 2: // Tên khách hàng
	            ketQuaTimKiem = hopDongDAO.getHopDongByTenKhachHang(tuKhoa);
	            break;
	        case 3: // Tổng tiền
	            try {
	                double tongTien = Double.parseDouble(tuKhoa);
	                ketQuaTimKiem = hopDongDAO.getHopDongByTongTien(tongTien);
	            } catch (NumberFormatException e) {
	                JOptionPane.showMessageDialog(this, "Nhập số vào trường Tổng tiền để tìm kiếm.");
	                return;
	            }
	            break;
	        default:
	            break;
	    }

	    LoadDanhSachHopDong(ketQuaTimKiem);
	}

	private void clearTable(JTable tbl) {
		DefaultTableModel model = (DefaultTableModel) tbl.getModel();
	    model.setRowCount(0);
	}
	
       private void addTableSelectionListener(JTable table) {
        table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            public void valueChanged(ListSelectionEvent event) {
                if (!event.getValueIsAdjusting()) {
                    int selectedRow = table.getSelectedRow();
                    if (selectedRow != -1) {
                        // Get information from the selected row and populate JTextFields
                        txtMaHD.setText(table.getValueAt(selectedRow, 0).toString());
                        txtTenHD.setText(table.getValueAt(selectedRow, 1).toString());
                        txtTenKH.setText(table.getValueAt(selectedRow, 2).toString());
                        txtGhiChu.setText(table.getValueAt(selectedRow, 7).toString());
                        spnTongTien.setValue(table.getValueAt(selectedRow, 3));
                        spnTang_1.setValue(table.getValueAt(selectedRow, 4));
 
                        // Convert date strings to Date objects and set them in JDateChooser components
                        try {
                            SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
                            Date ngayBatDau = dateFormat.parse(table.getValueAt(selectedRow, 5).toString());
                            Date ngayKetThuc = dateFormat.parse(table.getValueAt(selectedRow, 6).toString());

                            dateChooserBatDau.setDate(ngayBatDau);
                            dateChooserKetThuc.setDate(ngayKetThuc);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }

                        // Additional fields can be updated similarly
                    }
                }
            }
        });
    }
}


