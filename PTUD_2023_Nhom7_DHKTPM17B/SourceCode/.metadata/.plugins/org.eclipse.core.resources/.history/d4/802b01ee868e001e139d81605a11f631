package dao;

import java.sql.Connection;
import java.sql.Date;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

import connectDB.ConnectDB;
import entity.BangPhanCong;
import entity.CongDoan;
import entity.CongNhan;
import entity.NhanVien;
import entity.PhongBan;
import entity.SanPham;

/**
 * @author Nguyễn Hồng Quân
 */
public class BangPhanCong_DAO {

	public ArrayList<BangPhanCong> getDanhSachPhanCong() {
		ArrayList<BangPhanCong> dsPC = new ArrayList<>();
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "Select * from BangPhanCong pc join CongNhan cn on cn.maCN = pc.maCN join CongDoan cd on cd.maCD = pc.maCD join SanPham sp on sp.maSP = cd.maSP";
			Statement sta = con.createStatement();

			ResultSet rs = sta.executeQuery(sql);
			while (rs.next()) {
				String maCN = rs.getString("macn");
				CongNhan cn = new CongNhan(maCN);
				cn.setHoTen(rs.getString("hoTen"));
				String maCD = rs.getString("macd");
				SanPham sp = new SanPham();
				sp.setMaSP(rs.getString("maSP"));
				sp.setTenSP(rs.getString("tenSP"));
				CongDoan cd = new CongDoan(maCD);
				cd.setTenCD(rs.getString("tenCD"));
				cd.setSp(sp);
				int soLuongPC = rs.getInt("soLuongPhanCong");
				Date ngayPC = rs.getDate("ngayPhanCong");
				int tt = rs.getInt("trangThai");

				BangPhanCong bpc = new BangPhanCong(cn, cd, soLuongPC, ngayPC, tt);
				dsPC.add(bpc);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return dsPC;
	}
	
	public boolean capNhatSoLuongPhanCong(BangPhanCong pc) {
		PreparedStatement sta = null;
		int n = 0;
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "update BangPhanCong set soLuongPhanCong = ? where maCN = ? and maCD = ? ";
			sta = con.prepareStatement(sql);

			sta.setInt(1, pc.getSoLuongPC());
			sta.setString(2, pc.getCongNhan().getMaCN());
			sta.setString(3, pc.getCongDoan().getMaCD());

			n = sta.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				sta.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return n > 0;
	}

	public boolean capNhatTrangThaiHoanThanh(String maCN, String maCD, int trangThai) {
		PreparedStatement sta = null;
		int n = 0;
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "update BangPhanCong set trangThai = ? where maCN = ? and maCD = ? ";
			sta = con.prepareStatement(sql);

			sta.setInt(1, trangThai);
			sta.setString(2, maCN);
			sta.setString(3, maCD);

			n = sta.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				sta.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return n > 0;
	}

	public boolean them(BangPhanCong phanCong) {
		PreparedStatement sta = null;
		int n = 0;
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "INSERT INTO BangPhanCong (maCN, maCD, soLuongPhanCong, ngayPhanCong, trangThai) VALUES (?, ?, ?, ?, ?)";
			sta = con.prepareStatement(sql);

			sta.setString(1, phanCong.getCongNhan().getMaCN());
			sta.setString(2, phanCong.getCongDoan().getMaCD());
			sta.setInt(3, phanCong.getSoLuongPC());
			Date sqlNgayPC = new Date(phanCong.getNgayPhanCong().getTime());
			sta.setDate(4, sqlNgayPC);
			sta.setInt(5, phanCong.getTrangThai());

			n = sta.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				sta.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return n > 0;
	}

	public boolean kiemTraTonTaiCuaBangPhanCong(String maCN, String maCD) {
		PreparedStatement sta = null;
		int n = 0;
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "select count(*) from BangPhanCong where maCN = ? and maCD = ?";
			sta = con.prepareStatement(sql);

			sta.setString(1, maCN);
			sta.setString(2, maCD);

			ResultSet rs = sta.executeQuery();
			while (rs.next()) {
				n = rs.getInt(1);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		} finally {
			try {
				sta.close();
			} catch (SQLException e) {
				e.printStackTrace();
			}
		}
		return n > 0;
	}
	
	public ArrayList<CongNhan> getDSCongNhanChuaDuocPhanCongTheoToVaNgayPhanCong(String ngay, int maTo) {
		ArrayList<CongNhan> dsCN = new ArrayList<CongNhan>();
		PreparedStatement sta = null;
		try {
			ConnectDB.getInstance();
			Connection con = ConnectDB.getConnection();
			String sql = "Select * from NhanVien nv join PhongBan pb on nv.maPB = pb.maPB where manv = ?";
			sta = con.prepareStatement(sql);
			sta.setString(1, ma);

			ResultSet rs = sta.executeQuery();
			while (rs.next()) {
				String maNV = rs.getString("manv");
				String hoTen = rs.getString("hoten");
				Date ngaySinh = rs.getDate("ngaysinh");
				int gioiTinh = rs.getInt("gioiTinh");
				String cmnd = rs.getString("cmnd");
				String soDienThoai = rs.getString("sodt");
				String email = rs.getString("email");
				String diaChi = rs.getString("diachi");
				String trinhDo = rs.getString("trinhdo");
				String chucVu = rs.getString("chucvu");
				Date ngayVaoLam = rs.getDate("ngayvaolam");
				int trangThaiTaiKhoan = rs.getInt("trangthaitaikhoan");
				String ghiChu = rs.getString("ghichu");
				String maPhong = rs.getString("mapb");
				String tenPhong = rs.getString("tenpb");
				String toaNha = rs.getString("toanha");
				int tang = rs.getInt("tang");
				float dienTich = rs.getFloat("dienTich");
				String ghiChuPB = rs.getString("ghichu");
				PhongBan phongBan = new PhongBan(maPhong, tenPhong, toaNha, tang, dienTich, ghiChuPB);
				float heSoLuong = rs.getFloat("hesoluong");
				float phuCap = rs.getFloat("phucap");

				NhanVien nv = new NhanVien(maNV, hoTen, ngaySinh, gioiTinh, cmnd, soDienThoai, email, diaChi, trinhDo,
						chucVu, ngayVaoLam, trangThaiTaiKhoan, ghiChu, phongBan, heSoLuong, phuCap);

				dsCN.add(nv);
			}
		} catch (SQLException e) {
			e.printStackTrace();
		}
		return dsCN;
	}


}
