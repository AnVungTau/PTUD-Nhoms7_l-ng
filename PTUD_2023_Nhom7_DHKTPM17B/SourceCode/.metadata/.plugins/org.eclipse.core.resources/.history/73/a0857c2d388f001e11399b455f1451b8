package gui;

import javax.swing.JPanel;
import java.awt.BorderLayout;
import java.awt.Dimension;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.awt.Color;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.JComboBox;
import javax.swing.JTextField;
import javax.swing.JButton;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.table.DefaultTableModel;
import dao.HopDong_DAO;
import dao.NhanVien_DAO;
import dao.SanPham_DAO;
import dao.TaiKhoan_DAO;
import entity.HopDong;
import entity.SanPham;
import util.QuanLyMaSanPham;
import javax.swing.ImageIcon;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JTextArea;
import javax.swing.JSpinner;
import javax.swing.BorderFactory;

/**
 * @author Trần Vũ Minh Nhật
 */
public class SanPham_Panel extends JPanel implements ActionListener, MouseListener {

	private static final long serialVersionUID = 1L;
	private JTextField txtTimHopDong;
	private JTable tblHopDong;
	private JTextField txtMaSanPham;
	private JTextField txtTenSanPham;
	private JTable table;
	private DefaultTableModel model;
	private JButton btnTimHopDong;
	private JButton btnTim;
	private JButton btnLamMoi;
	private DefaultTableModel modelTaiKhoan;
	private JSpinner spnSoLuong;
	private JComboBox<String> cmbDonViTinh;
	private JTextArea txtGhiChu;
	private JButton btnThem;
	private JButton btnLuu;
	private JPanel pnlDanhSachSanPham;
	private JTextField txtTimSanPham;  
	private SanPham_DAO sanPhamDAO = new SanPham_DAO();
	private HopDong_DAO hopDongDAO = new HopDong_DAO();
	private HopDong selectedHopDong = new HopDong();
	public SanPham_Panel() {
		setBackground(new Color(255, 255, 255));
		setLayout(new BorderLayout(0, 0));

		JPanel pnlNorth = new JPanel();
		pnlNorth.setPreferredSize(new Dimension(10, 310));
		pnlNorth.setSize(new Dimension(0, 300));
		add(pnlNorth, BorderLayout.NORTH);
		pnlNorth.setLayout(new BorderLayout(0, 0));

		JPanel pnlTitle = new JPanel();
		pnlTitle.setBackground(new Color(255, 255, 255));
		pnlNorth.add(pnlTitle, BorderLayout.NORTH);

		JLabel lblTitle = new JLabel("THÔNG TIN SẢN PHẨM ");
		lblTitle.setFont(new Font("Tahoma", Font.PLAIN, 18));
		pnlTitle.add(lblTitle);

		JPanel pnlThongTin = new JPanel();
		pnlThongTin.setBackground(new Color(255, 255, 255));
		pnlNorth.add(pnlThongTin, BorderLayout.CENTER);
		pnlThongTin.setLayout(null);

		JPanel pnlDanhSachHopDong = new JPanel();
		pnlDanhSachHopDong.setBackground(new Color(255, 255, 255));
		pnlDanhSachHopDong.setBorder(
				new TitledBorder(null, "Danh s\u00E1ch hợp đồng", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		pnlDanhSachHopDong.setBounds(45, 0, 408, 236);
		pnlThongTin.add(pnlDanhSachHopDong);
		pnlDanhSachHopDong.setLayout(new BorderLayout(0, 0));

		JPanel pnlTim = new JPanel();
		pnlTim.setBackground(new Color(255, 255, 255));
		pnlTim.setPreferredSize(new Dimension(10, 33));
		pnlDanhSachHopDong.add(pnlTim, BorderLayout.NORTH);
		pnlTim.setLayout(null);

		txtTimHopDong = new JTextField();
		txtTimHopDong.setColumns(10);
		txtTimHopDong.setBounds(122, 5, 123, 20);
		pnlTim.add(txtTimHopDong);

		btnTimHopDong = new JButton("");
		btnTimHopDong.setBackground(new Color(255, 255, 255));
		btnTimHopDong.setBorderPainted(false);
		btnTimHopDong.setIcon(new ImageIcon("img\\Ampeross-Qetto-2-Search.24.png"));
		btnTimHopDong.setBounds(250, 3, 25, 25);
		pnlTim.add(btnTimHopDong);

		JPanel pnlTableHopDong = new JPanel();
		pnlTableHopDong.setBackground(new Color(255, 255, 255));
		pnlDanhSachHopDong.add(pnlTableHopDong, BorderLayout.CENTER);
		pnlTableHopDong.setLayout(new BorderLayout(0, 0));

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBackground(new Color(255, 255, 255));
		pnlTableHopDong.add(scrollPane);

		String header[] = { "Mã HD", "Hợp đồng" };
		model = new DefaultTableModel(header, 0);
		tblHopDong = new JTable(model);
		tblHopDong.setSelectionForeground(new Color(0, 0, 0));
		tblHopDong.setFillsViewportHeight(true);
		tblHopDong.setGridColor(new Color(128, 128, 128));
		tblHopDong.setSelectionBackground(new Color(128, 255, 255));
		scrollPane.setViewportView(tblHopDong);

		btnLamMoi = new JButton("Làm mới");
		btnLamMoi.setBackground(new Color(255, 255, 255));
		btnLamMoi.setIcon(new ImageIcon("img\\Hopstarter-Button-Button-Reload.24.png"));
		btnLamMoi.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnLamMoi.setBounds(280, 247, 110, 25);
		pnlThongTin.add(btnLamMoi);

		JLabel lblMaSanPham = new JLabel("Mã sản phẩm");
		lblMaSanPham.setBounds(535, 16, 115, 20);
		pnlThongTin.add(lblMaSanPham);
		lblMaSanPham.setFont(new Font("Tahoma", Font.BOLD, 12));

		txtMaSanPham = new JTextField();
		txtMaSanPham.setBounds(635, 18, 145, 20);
		pnlThongTin.add(txtMaSanPham);
		txtMaSanPham.setDisabledTextColor(new Color(0, 0, 0));
		txtMaSanPham.setFont(new Font("Tahoma", Font.PLAIN, 10));
		txtMaSanPham.setEnabled(false);
		txtMaSanPham.setColumns(10);

		JLabel lblTenSanPham = new JLabel("Tên sản phẩm");
		lblTenSanPham.setBounds(535, 47, 115, 20);
		pnlThongTin.add(lblTenSanPham);
		lblTenSanPham.setFont(new Font("Tahoma", Font.BOLD, 12));

		JLabel lblSoLuong = new JLabel("Số lượng");
		lblSoLuong.setBounds(535, 78, 115, 20);
		pnlThongTin.add(lblSoLuong);
		lblSoLuong.setFont(new Font("Tahoma", Font.BOLD, 12));

		txtTenSanPham = new JTextField();
		txtTenSanPham.setBounds(635, 48, 145, 20);
		pnlThongTin.add(txtTenSanPham); 

		JLabel lblGhiChu = new JLabel("Ghi chú");
		lblGhiChu.setBounds(540, 154, 81, 20);
		pnlThongTin.add(lblGhiChu);
		lblGhiChu.setFont(new Font("Tahoma", Font.BOLD, 12));

		JLabel lblDonViTinh = new JLabel("Đơn vị tính");
		lblDonViTinh.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblDonViTinh.setBounds(535, 109, 115, 20);
		pnlThongTin.add(lblDonViTinh);

		cmbDonViTinh = new JComboBox<String>();
		cmbDonViTinh.setModel(new DefaultComboBoxModel<String>(new String[] { "Cái" }));
		cmbDonViTinh.setFont(new Font("Tahoma", Font.PLAIN, 12));
		cmbDonViTinh.setBounds(635, 109, 145, 20);
		pnlThongTin.add(cmbDonViTinh);

		btnThem = new JButton("Thêm");
		btnThem.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnThem.setBackground(Color.WHITE);
		btnThem.setBounds(425, 247, 110, 25);
		pnlThongTin.add(btnThem);

		btnLuu = new JButton("Lưu");
		btnLuu.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnLuu.setBackground(Color.WHITE);
		btnLuu.setBounds(576, 247, 110, 25);
		pnlThongTin.add(btnLuu);

		spnSoLuong = new JSpinner();
		spnSoLuong.setFont(new Font("Tahoma", Font.PLAIN, 12));
		spnSoLuong.setBounds(635, 79, 145, 20);
		pnlThongTin.add(spnSoLuong);

		txtGhiChu = new JTextArea();
		txtGhiChu.setRows(5);
		txtGhiChu.setColumns(10);
		txtGhiChu.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		txtGhiChu.setBounds(635, 153, 130, 85);
		pnlThongTin.add(txtGhiChu);

		txtTenSanPham.getDocument().addDocumentListener(new DocumentListener() {

			@Override
			public void removeUpdate(DocumentEvent e) {
			}

			@Override
			public void insertUpdate(DocumentEvent e) {
//				btnThem.setEnabled(validDataMatKhau()) 
			}

			@Override
			public void changedUpdate(DocumentEvent e) {

			}
		});
		pnlDanhSachSanPham = new JPanel();
		pnlDanhSachSanPham.setBorder(
				new TitledBorder(null, "Danh s\u00E1ch sản phẩm", TitledBorder.LEADING, TitledBorder.TOP, null, null));
		pnlDanhSachSanPham.setBackground(new Color(255, 255, 255));
		add(pnlDanhSachSanPham, BorderLayout.CENTER);
		pnlDanhSachSanPham.setLayout(new BorderLayout(0, 0));

		JScrollPane scrollPane_1 = new JScrollPane();
		scrollPane_1.setBackground(new Color(255, 255, 255));
		pnlDanhSachSanPham.add(scrollPane_1);

		String headerTaiKhoan[] = { "Mã NV (Mã TK)", "Tên TK", "Mật khẩu", "Quyền" };
		modelTaiKhoan = new DefaultTableModel(headerTaiKhoan, 0);
		table = new JTable(new DefaultTableModel(new Object[][] {},
				new String[] { "Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Đơn vị tính", "Hợp đồng", "Ghi chú" }));
		table.setGridColor(new Color(128, 128, 128));
		table.setFillsViewportHeight(true);
		table.setSelectionBackground(new Color(128, 255, 255));
		scrollPane_1.setViewportView(table);
		
		JPanel pnlTim_1 = new JPanel();
		pnlTim_1.setLayout(null);
		pnlTim_1.setSize(new Dimension(0, 100));
		pnlTim_1.setPreferredSize(new Dimension(10, 33));
		pnlTim_1.setBackground(Color.WHITE);
		pnlDanhSachSanPham.add(pnlTim_1, BorderLayout.NORTH);
		
		txtTimSanPham = new JTextField();
		txtTimSanPham.setColumns(10);
		txtTimSanPham.setBounds(341, 8, 226, 20);
		pnlTim_1.add(txtTimSanPham);
		
		JComboBox<String> cmbLoc = new JComboBox<String>();
		cmbLoc.setModel(new DefaultComboBoxModel<String>(new String[] {"Tất cả", "Tên sản phẩm"}));
		cmbLoc.setBounds(80, 7, 116, 20);
		pnlTim_1.add(cmbLoc);
		
		JLabel lblLoc = new JLabel("Lọc");
		lblLoc.setFont(new Font("Tahoma", Font.BOLD, 12));
		lblLoc.setBounds(10, 7, 60, 20);
		pnlTim_1.add(lblLoc);
		
		JButton btnTim_1 = new JButton("");
		btnTim_1.setFont(new Font("Tahoma", Font.PLAIN, 12));
		btnTim_1.setBorderPainted(false);
		btnTim_1.setBackground(Color.WHITE);
		btnTim_1.setBounds(570, 2, 25, 24);
		pnlTim_1.add(btnTim_1);

		btnThem.addActionListener(this);
		btnTimHopDong.addActionListener(this);
//		btnTim.addActionListener(this);
		btnLamMoi.addActionListener(this);
		tblHopDong.addMouseListener(this);
		table.addMouseListener(this);
		LoadDanhSachSanPham(sanPhamDAO.getAllSanPham());
		LoadDanhSachHopDong(hopDongDAO.getAllHopDong()); 
		addTableSelectionListener(table);
		tblHopDong.addMouseListener(new java.awt.event.MouseAdapter() {
		    public void mouseClicked(java.awt.event.MouseEvent evt) {
		        tableSanPhamMouseClicked(evt);
		    }
		});
	}
 
	private void LoadDanhSachHopDong(ArrayList<HopDong> dsHD) {
		// TODO Auto-generated method stub
		 clearTable(tblHopDong);  
		    DefaultTableModel model = (DefaultTableModel) tblHopDong.getModel();   
		    for (HopDong hd : dsHD) {
		        model.addRow(new Object[] {
		        		hd.getMaHD(),
		        		hd.getTenHD(),
		        });
		    } 
	}

	private void LoadDanhSachSanPham(ArrayList<SanPham> dsSP) {
	    clearTable(table);  
	    DefaultTableModel model = (DefaultTableModel) table.getModel();  
	    SimpleDateFormat dateFormat = new SimpleDateFormat("dd/MM/yyyy");
	    
	    for (SanPham sp : dsSP) {
	        model.addRow(new Object[] {
	        		sp.getMaSP(),
	                sp.getTenSP(),
	                sp.getSoLuong(),
	                sp.getDonViTinh(), 
	                sp.getHopDong().getTenHD(),
	                sp.getGhiChu()
	        });
	    } 
	}
	private void clearTable(JTable tbl) {
		DefaultTableModel model = (DefaultTableModel) tbl.getModel();
	    model.setRowCount(0);
	}
	private void tableSanPhamMouseClicked(java.awt.event.MouseEvent evt) {
	    int row = tblHopDong.getSelectedRow();
	    if (row >= 0) {
	        // Lấy thông tin của sản phẩm được chọn từ mô hình bảng
	        DefaultTableModel model = (DefaultTableModel) tblHopDong.getModel();
	        String maHD = (String) model.getValueAt(row, 0);
	        String tenHD = (String) model.getValueAt(row, 1);

	        selectedHopDong = new HopDong(maHD, tenHD);
	    }
	}
	public void actionPerformed(ActionEvent e) {
		Object o = e.getSource();

		if (o.equals(btnTimHopDong)) {
			// Xử lý sự kiện tìm hợp đồng
			try {
				timHopDong();
			} catch (Exception e1) {
				// TODO Auto-generated catch block
				e1.printStackTrace();
			}
		}

		if (o.equals(btnTim)) { 
			timSanPham();
		}

		if (o.equals(btnLamMoi)) { 
			lamMoiThongTin();
		}

		if (o.equals(btnThem)) { 
			 
				themSanPham();
			 
		}

		if (o.equals(btnLuu)) { 
//			suaSanPham();
		}
	}

	// Các phương thức xử lý sự kiện cụ thể
	public void timHopDong() throws Exception{
	    String tenHD = txtTimHopDong.getText();

	    // Kiểm tra nếu từ khoá không rỗng thì thực hiện tìm kiếm
	    if (!tenHD.trim().isEmpty()) {
	        // Thực hiện tìm hợp đồng dựa trên từ khoá (keyWord)
			ArrayList<HopDong> danhSachHopDong = HopDong_DAO.timKiemHopDongTheoTen(tenHD);

			// Sau khi có kết quả, cập nhật bảng hợp đồng
			updateBangHopDong(danhSachHopDong);
	    } else {
	        // Nếu từ khoá rỗng, hiển thị thông báo hoặc thực hiện hành động phù hợp
	        JOptionPane.showMessageDialog(this, "Vui lòng nhập từ khoá để tìm kiếm hợp đồng.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
	    }
	}

	public void updateBangHopDong(ArrayList<HopDong> danhSachHopDong) {
	    // Xóa dữ liệu hiện tại trong bảng
		while (model.getRowCount() > 0) {
		    model.removeRow(0);
		}

		if (!danhSachHopDong.isEmpty()) {
		    // Thêm dữ liệu mới vào bảng
		    for (HopDong hopDong : danhSachHopDong) {
		        Object[] rowData = { hopDong.getMaHD(), hopDong.getTenHD() };
		        model.addRow(rowData);
		    }
		} else {
		    // Hiển thị thông báo nếu không có kết quả tìm kiếm
		    JOptionPane.showMessageDialog(this, "Không tìm thấy hợp đồng nào.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
		}
	}
	public void locSanPham(String locValue) {
	    try {
	        // Lấy giá trị từ ComboBox
	        String tenSP = txtTimSanPham.getText();
	        SanPham_DAO sanphamDAO = new SanPham_DAO();
	        // Kiểm tra nếu từ khoá không rỗng thì thực hiện tìm kiếm
	        if (!tenSP.trim().isEmpty()) {
	        	ArrayList<SanPham> danhSachSanPham = null;

	            // Thực hiện tìm sản phẩm dựa trên từ khoá (keyWord) và giá trị lọc (locValue)
	            if (locValue.equals("Tất cả")) {
	                danhSachSanPham = sanphamDAO.getAllSanPham();
	            } else if (locValue.equals("Tên sản phẩm")) {
	                danhSachSanPham = sanphamDAO.timKiemSanPhamTheoTenSanPham(tenSP);
	            }

	            // Sau khi có kết quả, cập nhật bảng sản phẩm
	            updateBangSanPham(danhSachSanPham);
	        } else {
	            // Nếu từ khoá rỗng, hiển thị thông báo hoặc thực hiện hành động phù hợp
	            JOptionPane.showMessageDialog(this, "Vui lòng nhập từ khoá để tìm kiếm sản phẩm.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
	        }
	    } catch (Exception e) {
	        e.printStackTrace();
	        // Xử lý exception nếu có
	    }
	}


	public void timSanPham() { 
	}


	public void lamMoiThongTin() {  
		txtMaSanPham.setText("");
	    txtTenSanPham.setText("");
	    spnSoLuong.setValue(0);
	    cmbDonViTinh.setSelectedIndex(0);
	    txtGhiChu.setText("");
	}

	public void themSanPham() {
	    // Get input values
		QuanLyMaSanPham qlMa = new QuanLyMaSanPham();
	    String maSanPham = qlMa.generateMaSanPham();
	    String tenSanPham = txtTenSanPham.getText();
	    int soLuong = (int) spnSoLuong.getValue();
	    String donViTinh = cmbDonViTinh.getSelectedItem().toString();
	    String ghiChu = txtGhiChu.getText();
	    
	    // Validate required fields
	    if (tenSanPham.trim().isEmpty()) {
	        JOptionPane.showMessageDialog(this, "Vui lòng nhập tên sản phẩm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
	        return;
	    }

	    // Create a new SanPham object
	    SanPham sanPham = new SanPham(maSanPham, tenSanPham, soLuong, donViTinh, ghiChu, selectedHopDong);

	    // Add the SanPham to the database
	    SanPham_DAO sanPhamDAO = new SanPham_DAO();
	    boolean success = sanPhamDAO.themSanPham(sanPham);

	    if (success) {
	        JOptionPane.showMessageDialog(this, "Thêm sản phẩm thành công.");
	        // Reload the table with updated data
	        LoadDanhSachSanPham(sanPhamDAO.getAllSanPham());
	    } else {
	        JOptionPane.showMessageDialog(this, "Thêm sản phẩm thất bại.", "Lỗi", JOptionPane.ERROR_MESSAGE);
	    }
	}


	// Phương thức thêm sau đó trong class
    private void updateBangSanPham(ArrayList<SanPham> danhSachSanPham) {
        // Xóa dữ liệu hiện tại trong bảng sản phẩm
        while (modelTaiKhoan.getRowCount() > 0) {
            modelTaiKhoan.removeRow(0);
        }

        if (!danhSachSanPham.isEmpty()) {
            // Thêm dữ liệu mới vào bảng sản phẩm
            for (SanPham sanPham : danhSachSanPham) {
                Object[] rowData = {sanPham.getMaSP(), sanPham.getTenSP(), sanPham.getSoLuong(), sanPham.getDonViTinh(), sanPham.getHopDong().getTenHD(), sanPham.getGhiChu()};
                modelTaiKhoan.addRow(rowData);
            }
        } else {
            // Hiển thị thông báo nếu không có sản phẩm nào
            JOptionPane.showMessageDialog(this, "Không có sản phẩm nào.", "Thông báo", JOptionPane.INFORMATION_MESSAGE);
        }
    }

//    private void suaSanPham() {
//        // Get input values
//        String maSanPham = txtMaSanPham.getText();
//        String tenSanPham = txtTenSanPham.getText();
//        int soLuong = (int) spnSoLuong.getValue();
//        String donViTinh = cmbDonViTinh.getSelectedItem().toString();
//        String ghiChu = txtGhiChu.getText();
//
//        // Validate required fields
//        if (tenSanPham.trim().isEmpty()) {
//            JOptionPane.showMessageDialog(this, "Vui lòng nhập tên sản phẩm.", "Lỗi", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//
//        // Get the selected HopDong from the table
//        int selectedHopDongRow = tblHopDong.getSelectedRow();
//        if (selectedHopDongRow == -1) {
//            JOptionPane.showMessageDialog(this, "Vui lòng chọn hợp đồng.", "Lỗi", JOptionPane.ERROR_MESSAGE);
//            return;
//        }
//
//        String maHD = tblHopDong.getValueAt(selectedHopDongRow, 0).toString();
//        HopDong selectedHopDong = new HopDong(maHD, null);  // You need to modify the HopDong constructor
//
//        // Create a new SanPham object with updated values
//        SanPham updatedSanPham = new SanPham(maSanPham, tenSanPham, soLuong, donViTinh, ghiChu, selectedHopDong);
//
//        // Update the SanPham in the database
//        SanPham_DAO sanPhamDAO = new SanPham_DAO();
//        boolean success = sanPhamDAO.suaSanPham(updatedSanPham);
//
//        if (success) {
//            JOptionPane.showMessageDialog(this, "Sửa sản phẩm thành công.");
//            // Reload the table with updated data
//            LoadDanhSachSanPham(sanPhamDAO.getAllSanPham());
//        } else {
//            JOptionPane.showMessageDialog(this, "Sửa sản phẩm thất bại.", "Lỗi", JOptionPane.ERROR_MESSAGE);
//        }
//    }

    
	private void addTableSelectionListener(JTable table) {
	    table.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
	        public void valueChanged(ListSelectionEvent event) {
	            if (!event.getValueIsAdjusting()) {
	                int selectedRow = table.getSelectedRow();
	                if (selectedRow != -1) {
	                    // Get information from the selected row and populate JTextFields
	                    txtMaSanPham.setText(table.getValueAt(selectedRow, 0).toString());
	                    txtTenSanPham.setText(table.getValueAt(selectedRow, 1).toString()); 
	                    spnSoLuong.setValue(Integer.parseInt(table.getValueAt(selectedRow, 2).toString()));
	                    cmbDonViTinh.setSelectedItem(table.getValueAt(selectedRow, 3).toString()); 
	                    String ghiChu=table.getValueAt(selectedRow, 5).toString();
	                    if(ghiChu==null) {
	                    	ghiChu = "";
	                    } 
	                    txtGhiChu.setText(ghiChu);
 
	                }
	            }
	        }
	    });
	}

 
    @Override
    public void mousePressed(MouseEvent e) { 
    }

    @Override
    public void mouseReleased(MouseEvent e) { 
    }

    @Override
    public void mouseEntered(MouseEvent e) { 
    }

    @Override
    public void mouseExited(MouseEvent e) { 
    }

	@Override
	public void mouseClicked(MouseEvent e) {
		// TODO Auto-generated method stub
		
	}
}